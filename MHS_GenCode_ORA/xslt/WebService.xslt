<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:dateTimeObj="urn:xsltExtension-DateTime">
	<xsl:output method="text" encoding="UTF-8" media-type="text" />
	<xsl:template match="/">
'' =============================================
'' This Class is generated by BuildProject <xsl:value-of select="entity/@BuildProject"/>, 
'' a freeware developed by bibi.
'' Template: WebService.xslt 17/05/2007
'' Author:	<xsl:value-of select="entity/@author"/>
'' Create date:	<xsl:value-of select="dateTimeObj:GetDateTime('dd/MM/yyyy HH:mm')" />
'' Description:	
'' Revise History:	
'' =============================================
Imports System.Web.Services

&lt;System.Web.Services.WebService(Namespace:="http://tempuri.org/<xsl:value-of select="entity/@webservicename"/>/<xsl:value-of select="entity/@tableName"/>_WS")&gt; _
Public Class <xsl:value-of select="entity/@tableName"/>_WS
    Inherits System.Web.Services.WebService

    &lt;WebMethod()&gt; _
	Public Function InsertItem(ByVal xmlData as String) as string
		Try
			Dim bibi As <xsl:value-of select="entity/@tableName"/>_Info = InfoBase.ToObject(xmlData, GetType(<xsl:value-of select="entity/@tableName"/>_Info))
			Dim kpi As New <xsl:value-of select="entity/@tableName"/>_DAO
			kpi.InsertItem(bibi)
			kpi = Nothing
			Dim ret as New ReturnMessage
			ret.RetCode = ReturnCode.Success
			ret.RetName = ReturnName.Success
			Return ret.ToXML
		Catch ex as Exception
			Dim ret as New ReturnMessage
			ret.RetCode = ReturnCode.Failed
			ret.RetName = ReturnName.Failed
			ret.Description = ex.Message
			Return ret.ToXML
		End Try
	End Function

    &lt;WebMethod()&gt; _
	Public Function UpdateItem(ByVal xmlData As String) as String
		Try
			Dim bibi As <xsl:value-of select="entity/@tableName"/>_Info = InfoBase.ToObject(xmlData, GetType(<xsl:value-of select="entity/@tableName"/>_Info))
			Dim kpi As New <xsl:value-of select="entity/@tableName"/>_DAO
			kpi.UpdateItem(bibi)
			kpi = Nothing
			Dim ret as New ReturnMessage
			ret.RetCode = ReturnCode.Success
			ret.RetName = ReturnName.Success
			Return ret.ToXML
		Catch ex as Exception
			Dim ret as New ReturnMessage
			ret.RetCode = ReturnCode.Failed
			ret.RetName = ReturnName.Failed
			ret.Description = ex.Message
			Return ret.ToXML
		End Try
	End Function

    &lt;WebMethod()&gt; _
	Public Function DeleteItem(<xsl:apply-templates select="entity/columns" mode="DeleteParams"/>)
		Try
			Dim bibi As New <xsl:value-of select="entity/@tableName"/>_DAO
			bibi.DeleteItem(<xsl:apply-templates select="entity/columns" mode="DeleteValues"/>)
			bibi = Nothing
			Dim ret as New ReturnMessage
			ret.RetCode = ReturnCode.Success
			ret.RetName = ReturnName.Success
			Return ret.ToXML
		Catch ex as Exception
			Dim ret as New ReturnMessage
			ret.RetCode = ReturnCode.Failed
			ret.RetName = ReturnName.Failed
			ret.Description = ex.Message
			Return ret.ToXML
		End Try
	End Function

    &lt;WebMethod()&gt; _
	Public Function SelectItem(<xsl:apply-templates select="entity/columns" mode="DeleteParams"/>) as String
		Try
			Dim bibi As New <xsl:value-of select="entity/@tableName"/>_DAO
			Dim ds as DataSet = bibi.SelectItem(<xsl:apply-templates select="entity/columns" mode="DeleteValues"/>)
			Dim retVal As <xsl:value-of select="entity/@tableName"/>_Info
			If ds.Tables(0).Rows.Count &gt; 0 Then
				Dim row as DataRow = ds.Tables(0).Rows(0)
				retVal=New <xsl:value-of select="entity/@tableName"/>_Info
				<xsl:apply-templates select="entity/columns" mode="SelectSetValues"/>
	        End If
			bibi=Nothing

			Dim ret as New ReturnMessage
			ret.RetCode = ReturnCode.Success
			ret.RetName = ReturnName.Success
			ret.Data = retVal.ToXML
			Return ret.ToXML
		Catch ex as Exception
			Dim ret as New ReturnMessage
			ret.RetCode = ReturnCode.Failed
			ret.RetName = ReturnName.Failed
			ret.Description = ex.Message
			Return ret.ToXML
		End Try
	End Function

    &lt;WebMethod()&gt; _
	Public Function SelectAllItems() as String
		Try
			Dim ret as New ReturnMessage
			ret.RetCode = ReturnCode.Success
			ret.RetName = ReturnName.Success
            Dim sb As New System.Text.StringBuilder
            Dim stream As New System.IO.StringWriter(sb)
            Dim bibi As New <xsl:value-of select="entity/@tableName"/>_DAO
            bibi.SelectAllItems().WriteXml(stream)
            bibi = Nothing
            ret.Data = sb.ToString
            stream=nothing
            sb=nothing
			Return ret.ToXML
		Catch ex as Exception
			Dim ret as New ReturnMessage
			ret.RetCode = ReturnCode.Failed
			ret.RetName = ReturnName.Failed
			ret.Description = ex.Message
			Return ret.ToXML
		End Try
	End Function
	<xsl:apply-templates select="entity" mode="SelectBy"/>
End Class

</xsl:template>

<!--Cac function SelectItemsBy-->
<xsl:template match="entity" mode="SelectBy">
	<xsl:variable name="tablename" select="@tableName"/>
	<xsl:for-each select="./columns/property[@refColumn!='']">
    &lt;WebMethod()&gt; _
    Public Function SelectItemsBy<xsl:value-of select="@columnName"/>(ByVal <xsl:value-of select="@columnName"/> As <xsl:value-of select="@vbDataType"/>) As String
		Try
			
			Dim ret as New ReturnMessage
			ret.RetCode = ReturnCode.Success
			ret.RetName = ReturnName.Success
            Dim sb As New System.Text.StringBuilder
            Dim stream As New System.IO.StringWriter(sb)
            Dim bibi As New <xsl:value-of select="$tablename"/>_DAO
            bibi.SelectItemsBy<xsl:value-of select="@columnName"/>(<xsl:value-of select="@columnName"/>).WriteXml(stream)
            bibi = Nothing
            ret.Data = sb.ToString
            stream=nothing
            sb=nothing
			Return ret.ToXML
		Catch ex as Exception
			Dim ret as New ReturnMessage
			ret.RetCode = ReturnCode.Failed
			ret.RetName = ReturnName.Failed
			ret.Description = ex.Message
			Return ret.ToXML
		End Try
    End Function
	</xsl:for-each>
</xsl:template>

<!--danh sach tham so cho sub delete-->
<xsl:template match="entity/columns" mode="DeleteParams">
	<xsl:for-each select="property[@isPK='True']"><xsl:choose><xsl:when test="position()>1">, </xsl:when></xsl:choose>ByVal <xsl:value-of select="@columnName"/> as <xsl:value-of select="@vbDataType"/></xsl:for-each>
</xsl:template>

<!--danh sach tham so truyen vao sub delete cua DAO-->
<xsl:template match="entity/columns" mode="DeleteValues">
	<xsl:for-each select="property[@isPK='True']"><xsl:choose><xsl:when test="position()>1">, </xsl:when></xsl:choose><xsl:value-of select="@columnName"/></xsl:for-each>
</xsl:template>

<!--Gan gia tri trong Sub SelectItem-->
<xsl:template match="entity/columns" mode="SelectSetValues">
	<xsl:for-each select="property">
			If not IsDBNull(row.Item("<xsl:value-of select="@columnName"/>")) Then retVal.<xsl:value-of select="@columnName"/> = row.Item("<xsl:value-of select="@columnName"/>")</xsl:for-each>
</xsl:template>

</xsl:stylesheet>
