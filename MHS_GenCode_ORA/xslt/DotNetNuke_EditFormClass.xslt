<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:dateTimeObj="urn:xsltExtension-DateTime">
	<xsl:output omit-xml-declaration="yes" indent="no" method="text" encoding="UTF-8"/>
	<xsl:template match="/">
'' =============================================
'' This stored procedure is generated by BuildProject <xsl:value-of select="entity/@BuildProject"/>, 
'' a freeware developed by bibi.
'' Template: DotNetNuke module EditForm.xslt 17/10/2006
'' Author:	<xsl:value-of select="entity/@author"/>
'' Create date:	<xsl:value-of select="dateTimeObj:GetDateTime('dd/MM/yyyy HH:mm')" />
'' Description:	
'' Revise History:	
'' =============================================

Imports System
Imports System.Web
Imports System.Web.UI
Imports System.Web.UI.WebControls

Namespace DotNetNuke.Modules.<xsl:value-of select="entity/@tableName"/>

    Public Class <xsl:value-of select="entity/@tableName"/>_Edit
        Inherits Entities.Modules.PortalModuleBase

#Region "Controls"
        Protected WithEvents cmdUpdate As System.Web.UI.WebControls.LinkButton
        Protected WithEvents cmdCancel As System.Web.UI.WebControls.LinkButton
        Protected WithEvents cmdDelete As System.Web.UI.WebControls.LinkButton
#End Region

#Region "Private Members"
<xsl:apply-templates select="entity/columns" mode="ProtectedWithEvents"/>

<xsl:apply-templates select="entity/columns" mode="Private"/>
		Private _sUrl As String
#End Region

#Region "Event Handlers"
        Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
            Try
                _sUrl = CType(Settings("WebServiceUrl"), String)
                If _sUrl = "" Then
                    _sUrl = Config.GetSetting("WebServiceRoot") &amp; "<xsl:value-of select="entity/@tableName"/>_WS.asmx"
                End If

<xsl:apply-templates select="entity/columns" mode="KeyVar"/>

                If Not Page.IsPostBack Then
                    cmdDelete.Attributes.Add("onClick", "javascript:return confirm('" &amp; Localization.GetString("DeleteItem") &amp; "');")
                    If <xsl:apply-templates select="entity/columns" mode="KeyCondition"/> Then
                        Dim kpi As New <xsl:value-of select="entity/@tableName"/>_BOWS(_sUrl)
                        Dim bibi As <xsl:value-of select="entity/@tableName"/>_Info
                        bibi = kpi.SelectItem(<xsl:apply-templates select="entity/columns" mode="KeyParams"/>)
                        If Not bibi Is Nothing Then
                            'Load data
                            <xsl:apply-templates select="entity/columns" mode="SetValues"/>
                            <xsl:apply-templates select="entity/columns" mode="KeyDisabled"/>

                            cmdDelete.Visible = True
                        Else ' security violation attempt to access item not related to this Module
                            Response.Redirect(NavigateURL(), True)
                        End If
                    End If
                End If
            Catch exc As Exception
                ProcessModuleLoadException(Me, exc)
            End Try
        End Sub

        Private Sub cmdUpdate_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmdUpdate.Click
            Try
                ' Only Update if the Entered Data is Valid
                If Page.IsValid = True Then
                    Dim bibi As New <xsl:value-of select="entity/@tableName"/>_Info

                    'bind text values to object
                    <xsl:apply-templates select="entity/columns" mode="GetValues"/>

                    Dim kpi As New <xsl:value-of select="entity/@tableName"/>_BOWS(_sUrl)
                    If <xsl:apply-templates select="entity/columns" mode="KeyConditionEqual"/> Then<xsl:apply-templates select="entity/columns" mode="KeySetValue"/>
                        kpi.InsertItem(bibi)
                    Else
                        kpi.UpdateItem(bibi)
                    End If

                    ' Redirect back to the portal home page
                    Response.Redirect(NavigateURL(), True)
                End If
            Catch exc As Exception
                ProcessModuleLoadException(Me, exc)
            End Try
        End Sub

        Private Sub cmdCancel_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmdCancel.Click
            Try
                Response.Redirect(NavigateURL(), True)
            Catch exc As Exception
                ProcessModuleLoadException(Me, exc)
            End Try
        End Sub

        Private Sub cmdDelete_Click(ByVal sender As Object, ByVal e As EventArgs) Handles cmdDelete.Click
            Try
                If <xsl:apply-templates select="entity/columns" mode="KeyCondition"/> Then
                    Dim kpi As New <xsl:value-of select="entity/@tableName"/>_BOWS(_sUrl)
                    kpi.DeleteItem(<xsl:apply-templates select="entity/columns" mode="KeyParams"/>)
                    kpi = Nothing
                End If
                ' Redirect back to the portal home page
                Response.Redirect(NavigateURL(), True)
            Catch exc As Exception
                ProcessModuleLoadException(Me, exc)
            End Try
        End Sub
#End Region

#Region " Web Form Designer Generated Code "

        'This call is required by the Web Form Designer.
        &lt;System.Diagnostics.DebuggerStepThrough()&gt; Private Sub InitializeComponent()

        End Sub

        'NOTE: The following placeholder declaration is required by the Web Form Designer.
        'Do not delete or move it.
        Private designerPlaceholderDeclaration As System.Object

        Private Sub Page_Init(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Init
            'CODEGEN: This method call is required by the Web Form Designer
            'Do not modify it using the code editor.
            InitializeComponent()
        End Sub

#End Region
    End Class

End Namespace

</xsl:template>

<!--danh sach property-->
<xsl:template match="entity/columns" mode="ProtectedWithEvents">
	<xsl:for-each select="property">
		Protected WithEvents <xsl:value-of select="@columnName"/> As <xsl:choose>
																			<xsl:when test="@isIdentity='True'">System.Web.UI.WebControls.TextBox</xsl:when>
																			<xsl:when test="@isFK='True'">System.Web.UI.WebControls.DropDownList</xsl:when>
																			<xsl:when test="@dataType='date' or @dataType='datetime'">System.Web.UI.WebControls.TextBox</xsl:when>
																			<xsl:otherwise>System.Web.UI.WebControls.TextBox</xsl:otherwise>
																		</xsl:choose>
	</xsl:for-each>
</xsl:template>

<xsl:template match="entity/columns" mode="Private">
	<xsl:for-each select="property[@isPK='True']">
		Private __<xsl:value-of select="@columnName"/> As <xsl:value-of select="@vbDataType"/>
	</xsl:for-each>
</xsl:template>

<xsl:template match="entity/columns" mode="KeyVar">
	<xsl:for-each select="property[@isPK='True']">
                If Not (Request.Params("<xsl:value-of select="@columnName"/>") Is Nothing) Then
                    __<xsl:value-of select="@columnName"/> = Request.Params("<xsl:value-of select="@columnName"/>")
                Else
                    __<xsl:value-of select="@columnName"/> = <xsl:choose><xsl:when test="@vbDataType='date' or @vbDataType='datetime'">Date.MinValue</xsl:when>
                    													<xsl:when test="@vbDataType='string' or @vbDataType='guid'">""</xsl:when>
                    													<xsl:when test="@vbDataType='integer' or @vbDataType='double' or @vbDataType='byte'">0</xsl:when>
																		<xsl:otherwise>[hí hí, tự sửa nhé]</xsl:otherwise>
															</xsl:choose>
                End If
	</xsl:for-each>
</xsl:template>

<xsl:template match="entity/columns" mode="KeyCondition">
	<xsl:for-each select="property[@isPK='True']">
        <xsl:choose>
		<xsl:when test="position()>1"> And </xsl:when>
		</xsl:choose>__<xsl:value-of select="@columnName"/> &lt;&gt; <xsl:choose><xsl:when test="@vbDataType='date' or @vbDataType='datetime'">Date.MinValue</xsl:when>
                    													<xsl:when test="@vbDataType='string' or @vbDataType='guid'">""</xsl:when>
                    													<xsl:when test="@vbDataType='integer' or @vbDataType='double' or @vbDataType='byte'">0</xsl:when>
																		<xsl:otherwise>[hí hí, tự sửa nhé]</xsl:otherwise>
															</xsl:choose>
	</xsl:for-each>
</xsl:template>

<xsl:template match="entity/columns" mode="KeyConditionEqual">
	<xsl:for-each select="property[@isPK='True']">
        <xsl:choose>
		<xsl:when test="position()>1"> And </xsl:when>
		</xsl:choose>__<xsl:value-of select="@columnName"/> = <xsl:choose><xsl:when test="@vbDataType='date' or @vbDataType='datetime'">Date.MinValue</xsl:when>
                    													<xsl:when test="@vbDataType='string' or @vbDataType='guid'">""</xsl:when>
                    													<xsl:when test="@vbDataType='integer' or @vbDataType='double' or @vbDataType='byte'">0</xsl:when>
																		<xsl:otherwise>[hí hí, tự sửa nhé]</xsl:otherwise>
															</xsl:choose>
	</xsl:for-each>
</xsl:template>

<xsl:template match="entity/columns" mode="KeyParams">
	<xsl:for-each select="property[@isPK='True']">
        <xsl:choose>
		<xsl:when test="position()>1">, </xsl:when>
		</xsl:choose>__<xsl:value-of select="@columnName"/>
	</xsl:for-each>
</xsl:template>

<xsl:template match="entity/columns" mode="KeyDisabled">
	<xsl:for-each select="property[@isPK='True']">
							<xsl:value-of select="@columnName"/>.Enabled = False
	</xsl:for-each>
</xsl:template>

<xsl:template match="entity/columns" mode="KeySetValue">
	<xsl:for-each select="property[@isPK='True']">
						bibi.<xsl:value-of select="@columnName"/> = <xsl:value-of select="@columnName"/>.<xsl:choose>
												<xsl:when test="@isFK='True'">SelectedValue</xsl:when>
												<xsl:when test="@dataType='date' or @dataType='datetime'">Text</xsl:when>
												<xsl:otherwise>Text</xsl:otherwise>
											</xsl:choose>
	</xsl:for-each>
</xsl:template>

<xsl:template match="entity/columns" mode="SetValues">
	<xsl:for-each select="property">
							<xsl:value-of select="@columnName"/>.<xsl:choose>
												<xsl:when test="@isFK='True'">SelectedValue</xsl:when>
												<xsl:when test="@dataType='date' or @dataType='datetime'">Text</xsl:when>
												<xsl:otherwise>Text</xsl:otherwise>
											</xsl:choose> = bibi.<xsl:value-of select="@columnName"/>
							<xsl:text>
							</xsl:text>
	</xsl:for-each>
</xsl:template>

<xsl:template match="entity/columns" mode="GetValues">
	<xsl:for-each select="property">
					bibi.<xsl:value-of select="@columnName"/> = <xsl:choose>
																	<xsl:when test="@isPK='True'">__<xsl:value-of select="@columnName"/></xsl:when>
																	<xsl:when test="@isFK='True'"><xsl:value-of select="@columnName"/>.SelectedValue</xsl:when>
																	<xsl:when test="@dataType='date' or @dataType='datetime'"><xsl:value-of select="@columnName"/>.Text</xsl:when>
																	<xsl:otherwise><xsl:value-of select="@columnName"/>.Text</xsl:otherwise>
																</xsl:choose>
	</xsl:for-each>
</xsl:template>

</xsl:stylesheet>
