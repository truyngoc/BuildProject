<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:dateTimeObj="urn:xsltExtension-DateTime">
  <xsl:output omit-xml-declaration="yes" indent="no" method="text" encoding="UTF-8"/>
  <xsl:template match="/">
    '' =============================================
    '' This class is generated by TuấnNA2
    '' Author:	Nguyễn Anh Tuấn
    ''Update Oracle by Giangtd3
    ''author:Trịnh Đức Giang :D:D:D:D
    '' Create date:	<xsl:value-of select="dateTimeObj:GetDateTime('dd/MM/yyyy HH:mm')" />
    '' Description:	The properties of <xsl:value-of select="entity/@tableName"/> object
    '' Revise History:
    '' =============================================

    Public class <xsl:value-of select="entity/@tableName"/>_INFO
    Inherits InfoBase
    <xsl:apply-templates select="entity/columns" mode="Private"/>
    public sub New()
    End sub
    <xsl:apply-templates select="entity/columns" mode="Property"/>
    End Class
  </xsl:template>

  <!--danh sach bien private-->
  <xsl:template match="entity/columns" mode="Private">
    <xsl:for-each select="property">
      <xsl:choose>
        <xsl:when test="@dataType='NVARCHAR2' or @dataType='VARCHAR2' or @dataType='CHAR' or @dataType='NCHAR' or @dataType='VARCHAR'">
          Private _<xsl:value-of select="@columnName"/> as <xsl:value-of select="@vbDataType"/>
        </xsl:when>
        <xsl:when test="@dataType='image'">
          Private _<xsl:value-of select="@columnName"/> As Byte()
        </xsl:when>
        <xsl:when test="@dataType='DATE'">
        Private _<xsl:value-of select="@columnName"/> As Nullable(Of <xsl:value-of select="@vbDataType"/>)
        Private _<xsl:value-of select="@columnName"/>_From As Nullable(Of <xsl:value-of select="@vbDataType"/>)
        Private _<xsl:value-of select="@columnName"/>_To As Nullable(Of <xsl:value-of select="@vbDataType"/>)
        </xsl:when>
        <xsl:otherwise> 
          Private _<xsl:value-of select="@columnName"/> as Nullable(Of <xsl:value-of select="@vbDataType"/>)
        </xsl:otherwise>
      </xsl:choose>
    </xsl:for-each>
  </xsl:template>
  <!--danh sach property-->
  <xsl:template match="entity/columns" mode="Property">
    <xsl:for-each select="property">
      <xsl:choose>
        <xsl:when test="@dataType='NVARCHAR2' or @dataType='VARCHAR2' or @dataType='CHAR' or @dataType='NCHAR' or @dataType='VARCHAR'">
          Public Property <xsl:value-of select="@columnName"/>() as <xsl:value-of select="@vbDataType"/>
          Get
          Return _<xsl:value-of select="@columnName"/>
          End Get
          Set(ByVal Value as <xsl:value-of select="@vbDataType"/>)
          _<xsl:value-of select="@columnName"/> = Value
          End Set
          End Property
        </xsl:when>
        <xsl:when test="@dataType='image'">
          Public Property <xsl:value-of select="@columnName"/>() As Byte()
          Get
          Return _<xsl:value-of select="@columnName"/>
          End Get
          Set(ByVal Value As Byte())
          _<xsl:value-of select="@columnName"/> = Value
          End Set
          End Property
        </xsl:when>
        <xsl:when test="@dataType='DATE'">
         Public Property <xsl:value-of select="@columnName"/> As Nullable(Of <xsl:value-of select="@vbDataType"/>)
         Get
         Return _<xsl:value-of select="@columnName"/>
         End Get
         Set(ByVal Value As Nullable(Of <xsl:value-of select="@vbDataType"/>))
         _<xsl:value-of select="@columnName"/>=Value
         End Set
         End Property
         Public Property <xsl:value-of select="@columnName"/>_From() As Nullable(Of <xsl:value-of select="@vbDataType"/>)
         Get
         Return _<xsl:value-of select="@columnName"/>_From
         End Get
         Set(ByVal Value As Nullable(Of <xsl:value-of select="@vbDataType"/>))
         _<xsl:value-of select="@columnName"/>_From=Value
         End Set
         End Property
         Public Property <xsl:value-of select="@columnName"/>_To() As Nullable(Of <xsl:value-of select="@vbDataType"/>)
          Get
          Return _<xsl:value-of select="@columnName"/>_To
          End Get
          Set (ByVal Value As Nullable(Of <xsl:value-of select="@vbDataType"/>))
          _<xsl:value-of select="@columnName"/>_To=Value
          End Set
          End Property
        </xsl:when>
        <xsl:otherwise>
          Public Property <xsl:value-of select="@columnName"/>() as Nullable(Of <xsl:value-of select="@vbDataType"/>)
          Get
          Return _<xsl:value-of select="@columnName"/>
          End Get
          Set(ByVal Value as Nullable(Of <xsl:value-of select="@vbDataType"/>))
          _<xsl:value-of select="@columnName"/> = Value
          End Set
          End Property
        </xsl:otherwise>
      </xsl:choose>
    </xsl:for-each>
  </xsl:template>
  <!--<xsl:template match="entity/columns" mode="PrivateKey">
    <xsl:for-each select="property[@isPK='True']">
      Private _<xsl:value-of select="@columnName"/> as <xsl:value-of select="@vbDataType"/>
    </xsl:for-each>
  </xsl:template>
  <xsl:template match="entity/columns" mode="PramKey">
    <xsl:for-each select="property[@isPK='True']">
      <xsl:choose>
        <xsl:when test="position()>1">, </xsl:when>
      </xsl:choose>Byval <xsl:value-of select="@columnName"/> as <xsl:value-of select="@vbDataType"/> _
    </xsl:for-each>
  </xsl:template>
  <xsl:template match="entity/columns" mode="PropertyKey">
    <xsl:for-each select="property[@isPK='True']">
      Public Property <xsl:value-of select="@columnName"/>() as <xsl:value-of select="@vbDataType"/>
      Get
      Return _<xsl:value-of select="@columnName"/>
      End Get
      Set(ByVal Value as <xsl:value-of select="@vbDataType"/>)
      _<xsl:value-of select="@columnName"/> = Value
      End Set
      End Property
    </xsl:for-each>
  </xsl:template>
  <xsl:template match="entity/columns" mode="GetKey">
    <xsl:for-each select="property[@isPK='True']">
      _<xsl:value-of select="@columnName"/> = <xsl:value-of select="@columnName"/>
    </xsl:for-each>
  </xsl:template>-->
</xsl:stylesheet>
