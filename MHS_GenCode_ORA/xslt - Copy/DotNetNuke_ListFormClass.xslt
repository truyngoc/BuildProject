<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:dateTimeObj="urn:xsltExtension-DateTime">
	<xsl:output omit-xml-declaration="yes" indent="no" method="text" encoding="UTF-8"/>
	<xsl:template match="/">
'' =============================================
'' This stored procedure is generated by BuildProject <xsl:value-of select="entity/@BuildProject"/>, 
'' a freeware developed by bibi.
'' Template: DotNetNuke module EditForm.xslt 17/10/2006
'' Author:	<xsl:value-of select="entity/@author"/>
'' Create date:	<xsl:value-of select="dateTimeObj:GetDateTime('dd/MM/yyyy HH:mm')" />
'' Description:	
'' Revise History:	
'' =============================================

Imports System
Imports System.Web
Imports System.Web.UI
Imports System.Web.UI.WebControls

Namespace DotNetNuke.Modules.<xsl:value-of select="entity/@tableName"/>

    Public Class <xsl:value-of select="entity/@tableName"/>_List
        Inherits Entities.Modules.PortalModuleBase

#Region "Private Members"
		Private _wsUrl As String
#End Region

#Region "Event Handlers"
        Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
            Try
                _wsUrl = CType(Settings("WebServiceUrl"), String)
                If _wsUrl = "" Then
                    _wsUrl = Config.GetSetting("WebServiceRoot") &amp; "<xsl:value-of select="entity/@tableName"/>_WS.asmx"
                End If

                If Not Page.IsPostBack Then
                	BindGrid()
                End If
            Catch exc As Exception
                ProcessModuleLoadException(Me, exc)
            End Try
        End Sub

        Private Sub BindGrid()
            Dim bibi As New <xsl:value-of select="entity/@tableName"/>_BOWS(_wsUrl)
            Dim ds As DataSet
            ds = bibi.SelectAllItems
            If ds.Tables.Count > 0 Then
                grdDS.DataSource = ds
                grdDS.DataBind()
            End If
            ds = Nothing
            bibi = Nothing
        End Sub

#End Region

#Region " Web Form Designer Generated Code "

        'This call is required by the Web Form Designer.
        &lt;System.Diagnostics.DebuggerStepThrough()&gt; Private Sub InitializeComponent()

        End Sub

        Protected WithEvents grdDS As System.Web.UI.WebControls.DataGrid
        Protected WithEvents cmdAddNew As System.Web.UI.WebControls.LinkButton
        'NOTE: The following placeholder declaration is required by the Web Form Designer.
        'Do not delete or move it.
        Private designerPlaceholderDeclaration As System.Object

        Private Sub Page_Init(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Init
            'CODEGEN: This method call is required by the Web Form Designer
            'Do not modify it using the code editor.
            InitializeComponent()
        End Sub

#End Region

        Private Sub grdDS_EditCommand(ByVal source As Object, ByVal e As System.Web.UI.WebControls.DataGridCommandEventArgs) Handles grdDS.EditCommand
            Response.Redirect(EditUrl() <xsl:apply-templates select="entity/columns" mode="RequestParams"/>)
        End Sub

        Private Sub grdDS_DeleteCommand(ByVal source As Object, ByVal e As System.Web.UI.WebControls.DataGridCommandEventArgs) Handles grdDS.DeleteCommand
            Dim bibi As New <xsl:value-of select="entity/@tableName"/>_BOWS(_wsUrl)
            bibi.DeleteItem(<xsl:apply-templates select="entity/columns" mode="DeleteParams"/>)
            bibi = Nothing
            BindGrid()
        End Sub

        Private Sub cmdAddNew_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdAddNew.Click
            Response.Redirect(EditUrl())
        End Sub

	    Private Sub grdDS_ItemDataBound(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.DataGridItemEventArgs) Handles grdDS.ItemDataBound
	        If e.Item.ItemType = ListItemType.Item Or e.Item.ItemType = ListItemType.AlternatingItem Then
	            Dim cmdDel As LinkButton = CType(e.Item.FindControl("cmdDelete"), LinkButton)
	            If Not cmdDel Is Nothing Then cmdDel.Attributes.Add("onClick", "javascript:return confirm('Chắc chưa?');")
	        End If
	    End Sub

    End Class

End Namespace

</xsl:template>

<xsl:template match="entity/columns" mode="DeleteParams">
	<xsl:for-each select="property[@isPK='True']"><xsl:choose><xsl:when test="position()>1">, </xsl:when></xsl:choose>e.Item.Cells(<xsl:value-of select="position()+1"/>).Text</xsl:for-each>
</xsl:template>

<xsl:template match="entity/columns" mode="RequestParams">
	<xsl:for-each select="property[@isPK='True']"><xsl:choose><xsl:when test="position()>1"> &amp; &quot;&amp;</xsl:when><xsl:otherwise> &amp; &quot;?</xsl:otherwise></xsl:choose><xsl:value-of select="@columnName"/>=&quot; &amp; e.Item.Cells(<xsl:value-of select="position()+1"/>).Text</xsl:for-each>
</xsl:template>

</xsl:stylesheet>
